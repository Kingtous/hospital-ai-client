// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// 由Flutter主动调用，用于初始化模型
  void alert_init() {
    return _alert_init();
  }

  late final _alert_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('alert_init');
  late final _alert_init = _alert_initPtr.asFunction<void Function()>();

  /// 由Flutter主动调用，用于判断是否准备好
  int is_alert_ready() {
    return _is_alert_ready();
  }

  late final _is_alert_readyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('is_alert_ready');
  late final _is_alert_ready = _is_alert_readyPtr.asFunction<int Function()>();

  /// 由Flutter调用此函数完成图片的上传，注意，不要在此函数实现内同步进行推理，而是异步，实现内部维护一个有大小限制的FIFO队列。
  /// 返回0表示成功。
  int post_alert_img(
    ffi.Pointer<PredictBean> bean,
  ) {
    return _post_alert_img(
      bean,
    );
  }

  late final _post_alert_imgPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PredictBean>)>>(
          'post_alert_img');
  late final _post_alert_img =
      _post_alert_imgPtr.asFunction<int Function(ffi.Pointer<PredictBean>)>();
}

final class PredictBean extends ffi.Struct {
  external ffi.Pointer<ffi.Void> bgra_data;

  external ffi.Pointer<ffi.Char> uuid;

  @ffi.Size()
  external int len;

  @ffi.Int()
  external int cam_id;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;

  @ffi.Int()
  external int stride;
}
